networks:
  mlflow_network: 
    
services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mlflow_network

  # pgadmin:
  #   container_name: container-pgadmin
  #   image: dpage/pgadmin4
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   restart: unless-stopped
  #   networks:
  #     - mlflow_network


  minio:
    restart: always
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
      - MINIO_STORAGE_USE_HTTPS=false
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - mlflow_network

  minio-setup:
    image: quay.io/minio/mc
    depends_on:
      - minio
    volumes:
      - ./minio/create-bucket.sh:/create-bucket.sh
    entrypoint: /bin/sh
    command: -c "chmod +x /create-bucket.sh && /create-bucket.sh"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
    networks:
      - mlflow_network


  mlflow:
    restart: always
    build: ./mlflow
    image: mlflow_server
    container_name: mlflow_server
    ports:
      - "5001:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      # - MLFLOW_TRACKING_URI=http://localhost:5001
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT}
      - MLFLOW_S3_IGNORE_TLS=true
      - MLFLOW_TRACKING_USERNAME=administrator
      - MLFLOW_TRACKING_PASSWORD=password
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/mlflow
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination s3://mlflow
    depends_on:
      - postgres
      - minio-setup
    networks:
      - mlflow_network


  # nginxauth:
  #     depends_on: 
  #       - mlflow
  #     restart: always
  #     build: ./nginxauth
  #     image: nginxauthformlflow
  #     ports:
  #         - 80:80

  # oauth2-proxy:
  #   image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
  #   container_name: oauth2-proxy
  #   depends_on:
  #     - mlflow
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     OAUTH2_PROXY_PROVIDER: azure
  #     OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
  #     OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
  #     OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
  #     OAUTH2_PROXY_EMAIL_DOMAINS: "*"
  #     OAUTH2_PROXY_OIDC_ISSUER_URL: https://login.microsoftonline.com/${OAUTH2_PROXY_TENANT_ID}/v2.0
  #     OAUTH2_PROXY_REDEEM_URL: https://login.microsoftonline.com/${OAUTH2_PROXY_TENANT_ID}/oauth2/v2.0/token
  #     OAUTH2_PROXY_LOGIN_URL: https://login.microsoftonline.com/${OAUTH2_PROXY_TENANT_ID}/oauth2/v2.0/authorize
  #     OAUTH2_PROXY_SCOPE: "openid email profile"
  #     OAUTH2_PROXY_COOKIE_EXPIRE: 3h
  #     OAUTH2_PROXY_COOKIE_REFRESH: 1h
  #     OAUTH2_PROXY_UPSTREAMS: http://mlflow:5000
  #     OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:3000
  #     OAUTH2_PROXY_REDIRECT_URL: http://127.0.0.1:3000/oauth2/callback
  #     OAUTH2_PROXY_COOKIE_SECURE: "false"
  #     OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: "true"
  #     OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: "true"
  #     OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
  #     OAUTH2_PROXY_PASS_USER_HEADERS: "true"
  #     OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
  #     OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: "true"
  #     OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
  #   networks:
  #     - mlflow_network

volumes:
  postgres_data:
  minio_data:
